from aiogram import types, Dispatcher
from keyboards import *
from aiogram.dispatcher import FSMContext
from states.select_states import *
from data.books import books


async def process_help2(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    await call.message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ:",
    reply_markup=select_level())
    await state.set_state(form_search.waiting_for_level)

async def process_help3(call: types.CallbackQuery, state: FSMContext):
    data = call.data
    print(data[-1])
    
    int(data[-1])
    await state.update_data(level=data)
    await call.message.answer(
        "–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—à –∂–∞–Ω—Ä –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω:",
    reply_markup=select_genre())
    await state.set_state(form_search.waiting_for_genre)

async def process_help4(call: types.CallbackQuery, state: FSMContext):
    info = await state.get_data()
    level = info["level"]
    genre = call.data
    try:
        if level in books and genre in books[level]:
            recs = books[level][genre]
            response = f"–í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–Ω–∏–≥ —É—Ä–æ–≤–Ω—è {level} –≤ –∂–∞–Ω—Ä–µ {genre}:\n\n"
            for b in recs:
                response += f"üìñ {b['title']} ‚Äî {b['desc']}\n"
            await call.message.answer(f"{response}", reply_markup=back())
        else:
            await call.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à—ë–ª –∫–Ω–∏–≥–∏ –ø–æ —ç—Ç–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –∂–∞–Ω—Ä.")
    except:
        pass
    await state.finish()

async def back_menu(call: types.CallbackQuery, state:FSMContext):
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É", callback_data="find_book"),
        InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω–∞—è –∫–Ω–∏–≥–∞", callback_data="random_book"),
        InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
    )
    await call.message.answer(
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–Ω–∏–≥–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n/help, /recommend, /random_book",
        reply_markup=keyboard        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.finish()



def register_handlers_select_inline(dp: Dispatcher):
    dp.register_callback_query_handler(process_help2, lambda call: call.data == "find_book")
    dp.register_callback_query_handler(process_help3, state=form_search.waiting_for_level)
    dp.register_callback_query_handler(process_help4, state=form_search.waiting_for_genre)
    dp.register_callback_query_handler(back_menu, lambda call: call.data == "back")